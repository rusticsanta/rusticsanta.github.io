{"version":3,"sources":["components/RemainingUntilChristmas/RemainingUntilChristmas.tsx","screens/Home/Home.tsx","screens/About/About.tsx","screens/Contact/Contact.tsx","components/GoogleAnalytics.tsx","images/landing-page.jpg","images/page-background.jpg","components/Header/Header.tsx","components/NavigationBar/NavigationBar.tsx","components/UI/Footer.tsx","components/HomepageLayout.tsx","screens/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CalculateTimeLeftToChristmas","today","Date","cmas","getFullYear","getMonth","getDate","setFullYear","difference","getTime","timeLeft","days","hours","minutes","seconds","Math","floor","RemainingUntilChristmas","useState","setTimeLeft","useEffect","timer","setTimeout","clearTimeout","Container","className","Row","Col","ScreensHome","Helmet","name","content","ScreensAbout","ScreensContact","width","href","GoogleAnalytics","this","logPageChange","props","location","pathname","search","prevLocation","isDifferentPathname","isDifferentSearch","page","window","ReactGA","set","origin","options","pageview","Component","component","initialize","process","MyHeader","pageHeader","React","createRef","isHomePage","backgroundImg","background","pageBackground","centerText","pathName","GetCenterText","innerWidth","updateScroll","windowScrollTop","pageYOffset","current","style","transform","addEventListener","removeEventListener","backgroundImage","ref","Header","withRouter","NavigationBar","isOpen","setIsOpen","navbarColor","setNavbarColor","updateNavbarColor","document","documentElement","scrollTop","body","Navbar","expand","dark","NavbarBrand","id","cloudName","secure","publicId","quality","radius","crop","NavbarToggler","onClick","Collapse","navbar","Nav","marginRight","NavItem","NavLink","tag","ReactRouterNavLink","to","exact","activeClassName","NavbarText","size","color","Footer","HomepageLayout","children","ScreensRoot","GA","path","App","Boolean","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4cAcA,SAASA,IACL,IAAMC,EAAQ,IAAIC,KACZC,EAAO,IAAID,KAAKD,EAAMG,cAAe,GAAI,IACvB,IAApBH,EAAMI,YAAoBJ,EAAMK,UAAY,IAC5CH,EAAKI,YAAYJ,EAAKC,cAAgB,GAG1C,IAAMI,EAAaL,EAAKM,UAAYR,EAAMQ,UACtCC,EAAkB,CAClBC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,GAYb,OATIN,EAAa,IACbE,EAAW,CACPC,KAAMI,KAAKC,MAAMR,EAAU,OAC3BI,MAAOG,KAAKC,MAAOR,EAAU,KAAuB,IACpDK,QAASE,KAAKC,MAAOR,EAAa,IAAO,GAAM,IAC/CM,QAASC,KAAKC,MAAOR,EAAa,IAAQ,MAI3CE,EAGX,IAwCeO,EAxCoC,WAC/C,MAAgCC,mBAASlB,KAAzC,mBAAOU,EAAP,KAAiBS,EAAjB,KAUA,OARAC,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBH,EAAYnB,OACb,KAEH,OAAO,kBAAMuB,aAAaF,OAI1B,eAACG,EAAA,EAAD,CAAWC,UAAU,mBAArB,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,+BAAKjB,EAASC,KAAd,4BACA,uBACA,6BACI,sBAAKc,UAAU,sBAAf,UACI,iCACKf,EAASE,MADd,IACqB,8CAErB,iCACKF,EAASG,QADd,IACuB,gDAEvB,iCACKH,EAASI,QADd,IACuB,0DAMvC,uBACA,cAACY,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UCADC,G,OA1BwB,kBACnC,gCAEI,eAACC,EAAA,EAAD,WACI,wDACA,sBAAMC,KAAK,cAAcC,QAAQ,oDAEjC,sBAAMD,KAAK,UAAUC,QAAQ,0BAEjC,cAAC,EAAD,IAEA,qBAAKN,UAAU,OAAf,SACI,cAACD,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,eCsBLK,G,OA/EyB,WACpC,OACI,sBAAKP,UAAU,QAAf,UACI,eAACI,EAAA,EAAD,WACI,4DACA,sBAAMC,KAAK,cAAcC,QAAQ,iCACjC,sBAAMD,KAAK,UAAUC,QAAQ,aAEjC,eAACP,EAAA,EAAD,WACI,cAACA,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,0CACA,uBACA,8DACA,qCACA,8CACA,qCACA,0CACA,qCACA,4CACA,qCACA,uBACA,mDACA,uBACA,4BACI,+CAMhB,cAACD,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,0CACA,uBACA,8DACA,qCACA,8CACA,qCACA,0CACA,qCACA,4CACA,qCACA,uBACA,mDACA,uBACA,4BACI,gDAKhB,cAACH,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,0CACA,uBACA,8DACA,qCACA,8CACA,qCACA,0CACA,qCACA,4CACA,qCACA,uBACA,mDACA,uBACA,4BACI,oDC9BbM,G,OAzC2B,kBACtC,gCAEI,eAACJ,EAAA,EAAD,WACI,2DACA,sBAAMC,KAAK,cAAcC,QAAQ,mCAEjC,sBAAMD,KAAK,UAAUC,QAAQ,eAEjC,eAACP,EAAA,EAAD,WACI,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKO,MAAO,GAAZ,SACI,6CAGR,cAACR,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAKO,MAAO,GAAIT,UAAU,sBAA1B,UACI,qCACI,0JAKJ,uCACA,4BACI,mBAAGU,KAAK,iCAAR,uCAEJ,0CACA,4BACI,mBAAGA,KAAK,iDAAR,iDAEJ,wCACA,4BACI,mBAAGA,KAAK,uCAAR,yD,kDCvBlBC,E,uKACF,WACIC,KAAKC,cAAcD,KAAKE,MAAMC,SAASC,SAAUJ,KAAKE,MAAMC,SAASE,U,gCAGzE,YAAgE,IAAjCC,EAAgC,EAA1CH,SACjB,EAEIH,KAAKE,MADLC,SAAYC,EADhB,EACgBA,SAAUC,EAD1B,EAC0BA,OAEpBE,EAAsBH,IAAaE,EAAaF,SAChDI,EAAoBH,IAAWC,EAAaD,QAE9CE,GAAuBC,IACvBR,KAAKC,cAAcG,EAAUC,K,2BAIrC,SAAcD,GAAsC,IAApBC,EAAmB,uDAAV,GAC/BI,EAAOL,EAAWC,EACxB,EAAqBK,OAAbP,EAAR,EAAQA,SACRQ,IAAQC,IAAR,aACIH,OACAN,SAAS,GAAD,OAAKA,EAASU,QAAd,OAAuBJ,IAC5BT,KAAKE,MAAMY,UAElBH,IAAQI,SAASN,K,oBAGrB,WACI,OAAO,S,GA7BeO,aA6Cf,EAZyB,kBAAM,cAAC,IAAD,CAAOC,UAAWlB,KAYjD,EAVa,WAOxB,OAHIY,IAAQO,WAAWC,kBAHHA,MCnDT,MAA0B,yCCA1B,MAA0B,4C,OC0BzC,SAASC,EAASlB,GACd,IAAMmB,EAAmCC,IAAMC,YACzCC,EAAyC,MAA5BtB,EAAMC,SAASC,SAE5BqB,EAAgBD,EAAaE,EAAaC,EAC1CC,EAtBV,SAAuBC,GACnB,OAAQA,GACJ,IAAK,IACD,MAAO,0BACX,IAAK,SACD,MAAO,aACX,IAAK,YACD,MAAO,gBACX,IAAK,WACD,MAAO,eACX,IAAK,WACD,MAAO,eAGf,OAAOA,EAQYC,CAAc5B,EAAMC,SAASC,UAehD,OAbAkB,IAAMvC,WAAU,WACZ,GAAI2B,OAAOqB,WAAa,IAAK,CACzB,IAAMC,EAAe,WACjB,IAAMC,EAAkBvB,OAAOwB,YAAc,EAC7Cb,EAAWc,QAAQC,MAAMC,UAAY,iBAAmBJ,EAAkB,SAG9E,OADAvB,OAAO4B,iBAAiB,SAAUN,GAC3B,WACHtB,OAAO6B,oBAAoB,SAAUP,QAM7C,sBAAK5C,UAAW,eAAiBoC,EAAa,GAAK,sBAAnD,UACI,qBACIpC,UAAU,oBACVgD,MAAO,CACHI,gBAAgB,OAAD,OAASf,EAAT,MAEnBgB,IAAKpB,IAET,qBAAKjC,UAAU,iBAAf,SACI,eAACD,EAAA,EAAD,WACI,oBAAIC,UAAU,QAAd,SACI,+CAEJ,qBAAKA,UAAU,cAAf,SAA8BwC,YAOnCc,MA5DAC,aAAW,SAACzC,GAAD,OAAW,cAACkB,EAAD,eAAclB,O,yFCkFpC0C,G,OArE0B,WACrC,MAA4B/D,oBAAS,GAArC,mBAAOgE,EAAP,KAAeC,EAAf,KAEA,EAAsCxB,IAAMzC,SAAS,sBAArD,mBAAOkE,EAAP,KAAoBC,EAApB,KAgBA,OAdA1B,IAAMvC,WAAU,WACZ,IAAMkE,EAAoB,WAClBC,SAASC,gBAAgBC,UAAY,KAAOF,SAASG,KAAKD,UAAY,IACtEJ,EAAe,KACRE,SAASC,gBAAgBC,UAAY,KAAOF,SAASG,KAAKD,UAAY,MAC7EJ,EAAe,uBAIvB,OADAtC,OAAO4B,iBAAiB,SAAUW,GAC3B,WACHvC,OAAO6B,oBAAoB,SAAUU,OAKzC,cAACK,EAAA,EAAD,CAAQlE,UAAW,0BAA4B2D,EAAaQ,OAAO,KAAKC,MAAI,EAA5E,SACI,eAACrE,EAAA,EAAD,WACI,cAACsE,EAAA,EAAD,CAAa3D,KAAK,IAAI4D,GAAG,eAAzB,SACI,8BACI,cAAC,IAAD,CAAOC,UAAU,cAAcC,QAAQ,EAAMC,SAAS,uBAAtD,SACI,cAAC,IAAD,CAAgBC,QAAQ,OAAOC,OAAO,KAAKlE,MAAM,KAAKmE,KAAK,gBAIvE,cAACC,EAAA,EAAD,CAAeC,QA3BZ,kBAAMpB,GAAWD,IA2BYzD,UAAU,SAC1C,eAAC+E,EAAA,EAAD,CAAUtB,OAAQA,EAAQuB,QAAM,EAAhC,UACI,eAACC,EAAA,EAAD,CAAKjF,UAAU,UAAUgF,QAAM,EAAChC,MAAO,CAAEkC,YAAa,QAAtD,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASC,IAAKC,IAAoBC,GAAG,IAAIC,OAAO,EAAMnF,KAAK,OAAOoF,gBAAgB,SAAlF,oBAIJ,cAACN,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASC,IAAKC,IAAoBC,GAAG,SAASlF,KAAK,QAAQoF,gBAAgB,SAA3E,kCAIJ,cAACN,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASC,IAAKC,IAAoBC,GAAG,YAAYlF,KAAK,WAAWoF,gBAAgB,SAAjF,wBAIJ,cAACN,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASC,IAAKC,IAAoBC,GAAG,WAAWlF,KAAK,UAAUoF,gBAAgB,SAA/E,uBAIJ,cAACN,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASC,IAAKC,IAAoBC,GAAG,WAAWlF,KAAK,UAAUoF,gBAAgB,SAA/E,6BAKR,cAACC,EAAA,EAAD,UACI,mBAAGhF,KAAK,0CAAR,SACI,cAAC,IAAD,CAAYiF,KAAM,GAAIC,MAAO,uBC9D1CC,G,OAdmB,WAC9B,OACI,qBAAK7F,UAAU,SAAf,SACI,cAACD,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,CAAKD,UAAU,SAAf,SACI,cAACE,EAAA,EAAD,UACI,gEAA+B,IAAIzB,MAAOE,cAA1C,gCCgBTmH,G,OAfyC,SAAChF,GAAD,OACpD,qCACI,cAAC,EAAD,IACA,sBAAKd,UAAU,UAAf,UACI,cAAC,EAAD,IACA,cAACD,EAAA,EAAD,CAAWC,UAAU,gBAArB,SACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UAAMY,EAAMiF,eAGpB,cAAC,EAAD,YCMGC,EAhBwB,kBACnC,eAAC,IAAD,WAEKC,KAAa,cAAC,EAAD,IACd,cAAC,EAAD,UAEI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIV,OAAK,EAAC3D,UAAW1B,IAEjC,cAAC,IAAD,CAAO+F,KAAK,UAAUrE,UAAWtB,IACjC,cAAC,IAAD,CAAO2F,KAAK,YAAYrE,UAAWrB,a,OCbpC2F,MAJf,WACI,OAAO,cAAC,EAAD,K,OCOSC,QACa,cAA7B9E,OAAOP,SAASsF,UAEiB,UAA7B/E,OAAOP,SAASsF,UAEhB/E,OAAOP,SAASsF,SAASC,MAAM,2DCVvCC,iBACI,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJ1C,SAAS2C,eAAe,SDsHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e90b973e.chunk.js","sourcesContent":["import React, { FunctionComponent, useEffect, useState } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport './RemainingUntilChristmas.css';\r\n\r\ninterface ITime {\r\n    days: number;\r\n    hours: number;\r\n    minutes: number;\r\n    seconds: number;\r\n}\r\n\r\n/**\r\n * Simple function to get the number of days to christmas\r\n */\r\nfunction CalculateTimeLeftToChristmas(): ITime {\r\n    const today = new Date();\r\n    const cmas = new Date(today.getFullYear(), 11, 25);\r\n    if (today.getMonth() == 11 && today.getDate() > 25) {\r\n        cmas.setFullYear(cmas.getFullYear() + 1);\r\n    }\r\n\r\n    const difference = cmas.getTime() - today.getTime();\r\n    let timeLeft: ITime = {\r\n        days: 0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n    };\r\n\r\n    if (difference > 0) {\r\n        timeLeft = {\r\n            days: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n            hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n            minutes: Math.floor((difference / 1000 / 60) % 60),\r\n            seconds: Math.floor((difference / 1000) % 60),\r\n        };\r\n    }\r\n\r\n    return timeLeft;\r\n}\r\n\r\nconst RemainingUntilChristmas: FunctionComponent = () => {\r\n    const [timeLeft, setTimeLeft] = useState(CalculateTimeLeftToChristmas());\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setTimeLeft(CalculateTimeLeftToChristmas());\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timer);\r\n    });\r\n\r\n    return (\r\n        <Container className=\"remaining-center\">\r\n            <Row>\r\n                <Col>\r\n                    <h1>{timeLeft.days} DAYS UNTIL CHRISTMAS!</h1>\r\n                    <br />\r\n                    <h1>\r\n                        <div className=\"remaining-countdown\">\r\n                            <span>\r\n                                {timeLeft.hours} <strong>Hours</strong>\r\n                            </span>\r\n                            <span>\r\n                                {timeLeft.minutes} <strong>Minutes</strong>\r\n                            </span>\r\n                            <span>\r\n                                {timeLeft.seconds} <strong>Seconds</strong>\r\n                            </span>\r\n                        </div>\r\n                    </h1>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n            <Row>\r\n                <Col></Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RemainingUntilChristmas;\r\n","import React, { FunctionComponent } from 'react';\r\nimport Helmet from 'react-helmet';\r\n// import ImageGallery from 'react-image-gallery';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport RemainingUntilChristmas from 'src/components/RemainingUntilChristmas/RemainingUntilChristmas';\r\n\r\n// import ProjectGroup from '../../components/Project/Group';\r\nimport './Home.css';\r\n\r\n// const images = [\r\n//     { original: '', thumbnail: '', originalAlt: '', thumbnailAlt: '' },\r\n//     // {\r\n//     //     original:\r\n//     //         'https://res.cloudinary.com/rusticsanta/image/upload/v1626026884/IMG_2537_j7gvu1.jpg',\r\n//     //     thumbnail:\r\n//     //         'https://res.cloudinary.com/rusticsanta/image/upload/t_media_lib_thumb/v1626026884/IMG_2537_j7gvu1.jpg',\r\n//     //     originalAlt: 'Beautiful tile work done by Wilmac Flooring.',\r\n//     //     thumbnailAlt: 'Beautiful tile work done by Wilmac Flooring.',\r\n//     // },\r\n//     // {\r\n//     //     original: 'https://res.cloudinary.com/rusticsanta/image/upload/v1626026835/IMG_0077_elmomg.jpg',\r\n//     //     thumbnail:\r\n//     //         'https://res.cloudinary.com/rusticsanta/image/upload/t_media_lib_thumb/v1626026835/IMG_0077_elmomg.jpg',\r\n//     //     originalAlt: 'Incredible Entryway with custom centered tile.',\r\n//     //     thumbnailAlt: 'Incredible Entryway with custom centered tile.',\r\n//     // },\r\n//     // {\r\n//     //     original:\r\n//     //         'https://res.cloudinary.com/rusticsanta/image/upload/v1626026835/IMG_0078_zhbwky.jpg',\r\n//     //     thumbnail:\r\n//     //         'https://res.cloudinary.com/rusticsanta/image/upload/t_media_lib_thumb/v1626026835/IMG_0078_zhbwky.jpg',\r\n//     //     originalAlt: 'Beautiful wood floors and tile combined together. Work by Wilmac Flooring.',\r\n//     //     thumbnailAlt: 'Beautiful wood floors and tile combined together. Work by Wilmac Flooring.',\r\n//     // },\r\n//     // {\r\n//     //     original:\r\n//     //         'https://res.cloudinary.com/rusticsanta/image/upload/v1626026835/IMG_0073_f3wyeq.jpg',\r\n//     //     thumbnail:\r\n//     //         'https://res.cloudinary.com/rusticsanta/image/upload/t_media_lib_thumb/v1626026835/IMG_0073_f3wyeq.jpg',\r\n//     //     originalAlt: 'Beautiful wood floors and tile combined together. Work by Wilmac Flooring.',\r\n//     //     thumbnailAlt: 'Beautiful wood floors and tile combined together. Work by Wilmac Flooring.',\r\n//     // }\r\n// ];\r\n\r\n/* eslint-disable react/no-multi-comp */\r\n/* Heads up! ScreensHome uses inline styling, however it's not the best practice. Use CSS or styled components for\r\n * such things.\r\n * @TODO: Remove the inline styling everywhere\r\n */\r\nconst ScreensHome: FunctionComponent = () => (\r\n    <div>\r\n        {/* Defining the Page title, meta, description */}\r\n        <Helmet>\r\n            <title>Rustic Santa - Home</title>\r\n            <meta name=\"description\" content=\"Contains the featured projects of Rustic Santa.\" />\r\n            {/* TODO: Add subject content for SEO. */}\r\n            <meta name=\"subject\" content=\"Rustic Santa Claus\" />\r\n        </Helmet>\r\n        <RemainingUntilChristmas />\r\n        {/* <h1>Latest WoodWorking Projects</h1> */}\r\n        <div className=\"Home\">\r\n            <Container>\r\n                <Row>\r\n                    <Col>{/* <ImageGallery items={images} showBullets={true} /> */}</Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n        {/* <div>\r\n            <h2>\r\n                <a>Visit our Photo Gallery</a>\r\n            </h2>\r\n        </div> */}\r\n    </div>\r\n);\r\n\r\nexport default ScreensHome;\r\n","import React, { FunctionComponent } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n// import { Image, Transformation } from 'cloudinary-react';\r\nimport './About.css';\r\n\r\nconst ScreensAbout: FunctionComponent = () => {\r\n    return (\r\n        <div className=\"About\">\r\n            <Helmet>\r\n                <title>Rustic Santa - About Us</title>\r\n                <meta name=\"description\" content=\"About Page for Rustic Santa.\" />\r\n                <meta name=\"subject\" content=\"About\" />\r\n            </Helmet>\r\n            <Container>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <h1>About Us</h1>\r\n                            <br />\r\n                            <h3>What sets Rustic Santa apart</h3>\r\n                            <p>TBD.</p>\r\n                            <h4>Our Services</h4>\r\n                            <p>TBD.</p>\r\n                            <h4>Our Goal</h4>\r\n                            <p>TBD.</p>\r\n                            <h4>Our Values</h4>\r\n                            <p>TBD.</p>\r\n                            <br />\r\n                            <h3>Meet Rustic Santa</h3>\r\n                            <br />\r\n                            <p>\r\n                                <i>TBD. </i>\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h1>About Us</h1>\r\n                        <br />\r\n                        <h3>What sets Rustic Santa apart</h3>\r\n                        <p>TBD.</p>\r\n                        <h4>Our Services</h4>\r\n                        <p>TBD.</p>\r\n                        <h4>Our Goal</h4>\r\n                        <p>TBD.</p>\r\n                        <h4>Our Values</h4>\r\n                        <p>TBD.</p>\r\n                        <br />\r\n                        <h3>Meet Rustic Santa</h3>\r\n                        <br />\r\n                        <p>\r\n                            <i>TBD. </i>\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <h1>About Us</h1>\r\n                        <br />\r\n                        <h3>What sets Rustic Santa apart</h3>\r\n                        <p>TBD.</p>\r\n                        <h4>Our Services</h4>\r\n                        <p>TBD.</p>\r\n                        <h4>Our Goal</h4>\r\n                        <p>TBD.</p>\r\n                        <h4>Our Values</h4>\r\n                        <p>TBD.</p>\r\n                        <br />\r\n                        <h3>Meet Rustic Santa</h3>\r\n                        <br />\r\n                        <p>\r\n                            <i>TBD. </i>\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScreensAbout;\r\n","import React, { FunctionComponent } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport './Contact.css';\r\n\r\nconst ScreensContact: FunctionComponent = () => (\r\n    <div>\r\n        {/* Defining the Page title, meta, description */}\r\n        <Helmet>\r\n            <title>Rustic Santa - Contact</title>\r\n            <meta name=\"description\" content=\"Contact Page for Rustic Santa.\" />\r\n            {/* TODO: Add subject to your SEO */}\r\n            <meta name=\"subject\" content=\"Contact\" />\r\n        </Helmet>\r\n        <Container>\r\n            <Row>\r\n                <Col width={16}>\r\n                    <h1>Contact</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col width={16} className=\"Contact-contactinfo\">\r\n                    <blockquote>\r\n                        <p>\r\n                            Feel free to reach out with any questions or inquiries. Please do not send spam or try to\r\n                            advertise any services to me.\r\n                        </p>\r\n                    </blockquote>\r\n                    <h3>Email</h3>\r\n                    <p>\r\n                        <a href=\"mailto:rusticsanta@hotmail.com\">rusticsanta@hotmail.com</a>\r\n                    </p>\r\n                    <h3>LinkedIn</h3>\r\n                    <p>\r\n                        <a href=\"https://www.linkedin.com/in/MattJonesCreation/\">linkedin.com/in/MattJonesCreation</a>\r\n                    </p>\r\n                    <h3>Github</h3>\r\n                    <p>\r\n                        <a href=\"https://github.com/MattJonesCreation\">github.com/MattJonesCreation</a>\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    </div>\r\n);\r\n\r\nexport default ScreensContact;\r\n","// utils/GoogleAnalytics.js\r\nimport React, { Component } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Route } from 'react-router-dom';\r\n\r\ninterface ILocation {\r\n    pathname: string;\r\n    search: string;\r\n}\r\n\r\ninterface IGAProps {\r\n    location: ILocation;\r\n    options: Record<string, unknown>;\r\n}\r\n\r\nclass GoogleAnalytics extends Component<IGAProps> {\r\n    componentDidMount(): void {\r\n        this.logPageChange(this.props.location.pathname, this.props.location.search);\r\n    }\r\n\r\n    componentDidUpdate({ location: prevLocation }: IGAProps): void {\r\n        const {\r\n            location: { pathname, search },\r\n        } = this.props;\r\n        const isDifferentPathname = pathname !== prevLocation.pathname;\r\n        const isDifferentSearch = search !== prevLocation.search;\r\n\r\n        if (isDifferentPathname || isDifferentSearch) {\r\n            this.logPageChange(pathname, search);\r\n        }\r\n    }\r\n\r\n    logPageChange(pathname: string, search = ''): void {\r\n        const page = pathname + search;\r\n        const { location } = window;\r\n        ReactGA.set({\r\n            page,\r\n            location: `${location.origin}${page}`,\r\n            ...this.props.options,\r\n        });\r\n        ReactGA.pageview(page);\r\n    }\r\n\r\n    render(): null {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst RouteTracker: () => JSX.Element = () => <Route component={GoogleAnalytics} />;\r\n\r\nconst init: () => boolean = () => {\r\n    const isGAEnabled = process.env.NODE_ENV === 'production';\r\n\r\n    if (isGAEnabled) {\r\n        ReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS);\r\n    }\r\n\r\n    return isGAEnabled;\r\n};\r\n\r\nexport default {\r\n    GoogleAnalytics,\r\n    RouteTracker,\r\n    init,\r\n};\r\n","export default __webpack_public_path__ + \"static/media/landing-page.80bc4e98.jpg\";","export default __webpack_public_path__ + \"static/media/page-background.8e874b81.jpg\";","import React from 'react';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { Container } from 'reactstrap';\r\nimport background from 'src/images/landing-page.jpg';\r\nimport pageBackground from 'src/images/page-background.jpg';\r\nimport './Header.css';\r\n\r\nconst Header = withRouter((props) => <MyHeader {...props} />);\r\n\r\nfunction GetCenterText(pathName: string) {\r\n    switch (pathName) {\r\n        case '/':\r\n            return 'Create a Holiday Memory';\r\n        case '/about':\r\n            return 'About Page';\r\n        case '/services':\r\n            return 'Services Page';\r\n        case '/gallery':\r\n            return 'Gallery Page';\r\n        case '/contact':\r\n            return 'Contact Page';\r\n    }\r\n\r\n    return pathName;\r\n}\r\n\r\nfunction MyHeader(props: RouteComponentProps): JSX.Element {\r\n    const pageHeader: React.RefObject<any> = React.createRef();\r\n    const isHomePage = props.location.pathname === '/';\r\n\r\n    const backgroundImg = isHomePage ? background : pageBackground;\r\n    const centerText = GetCenterText(props.location.pathname);\r\n\r\n    React.useEffect(() => {\r\n        if (window.innerWidth > 991) {\r\n            const updateScroll = () => {\r\n                const windowScrollTop = window.pageYOffset / 3;\r\n                pageHeader.current.style.transform = 'translate3d(0,' + windowScrollTop + 'px,0)';\r\n            };\r\n            window.addEventListener('scroll', updateScroll);\r\n            return function cleanup() {\r\n                window.removeEventListener('scroll', updateScroll);\r\n            };\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className={'page-header' + (isHomePage ? '' : ' page-header-small')}>\r\n            <div\r\n                className=\"page-header-image\"\r\n                style={{\r\n                    backgroundImage: `url(${backgroundImg})`,\r\n                }}\r\n                ref={pageHeader}\r\n            ></div>\r\n            <div className=\"content-center\">\r\n                <Container>\r\n                    <h1 className=\"title\">\r\n                        <i>Rustic Santa</i>\r\n                    </h1>\r\n                    <div className=\"text-center\">{centerText}</div>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState, FunctionComponent } from 'react';\r\nimport { NavLink as ReactRouterNavLink } from 'react-router-dom';\r\nimport { FaFacebook } from 'react-icons/fa';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    NavbarBrand,\r\n    NavbarText,\r\n} from 'reactstrap';\r\nimport { Image, Transformation } from 'cloudinary-react';\r\n// import background from 'src/images/landing-page.jpg';\r\nimport './NavigationBar.css';\r\n\r\nconst NavigationBar: FunctionComponent = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    const [navbarColor, setNavbarColor] = React.useState('navbar-transparent');\r\n\r\n    React.useEffect(() => {\r\n        const updateNavbarColor = () => {\r\n            if (document.documentElement.scrollTop > 399 || document.body.scrollTop > 399) {\r\n                setNavbarColor('');\r\n            } else if (document.documentElement.scrollTop < 400 || document.body.scrollTop < 400) {\r\n                setNavbarColor('navbar-transparent');\r\n            }\r\n        };\r\n        window.addEventListener('scroll', updateNavbarColor);\r\n        return function cleanup() {\r\n            window.removeEventListener('scroll', updateNavbarColor);\r\n        };\r\n    });\r\n\r\n    return (\r\n        <Navbar className={'navbar-santa fixed-top ' + navbarColor} expand=\"md\" dark>\r\n            <Container>\r\n                <NavbarBrand href=\"/\" id=\"navbar-brand\">\r\n                    <div>\r\n                        <Image cloudName=\"rusticsanta\" secure={true} publicId=\"IMG_0072_sfu1ip.webp\">\r\n                            <Transformation quality=\"auto\" radius=\"20\" width=\"80\" crop=\"scale\" />\r\n                        </Image>\r\n                    </div>\r\n                </NavbarBrand>\r\n                <NavbarToggler onClick={toggle} className=\"mr-2\" />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className=\"mr-auto\" navbar style={{ marginRight: 'auto' }}>\r\n                        <NavItem>\r\n                            <NavLink tag={ReactRouterNavLink} to=\"/\" exact={true} name=\"home\" activeClassName=\"active\">\r\n                                Home\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink tag={ReactRouterNavLink} to=\"/about\" name=\"about\" activeClassName=\"active\">\r\n                                About Rustic Santa\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink tag={ReactRouterNavLink} to=\"/services\" name=\"services\" activeClassName=\"active\">\r\n                                Services\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink tag={ReactRouterNavLink} to=\"/gallery\" name=\"gallery\" activeClassName=\"active\">\r\n                                Gallery\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink tag={ReactRouterNavLink} to=\"/contact\" name=\"contact\" activeClassName=\"active\">\r\n                                Contact Us\r\n                            </NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <NavbarText>\r\n                        <a href=\"https://www.facebook.com/rustic.santa.9\">\r\n                            <FaFacebook size={36} color={'#fff'} />\r\n                        </a>\r\n                    </NavbarText>\r\n                </Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport './Footer.css';\r\n\r\nconst Footer: FunctionComponent = () => {\r\n    return (\r\n        <div className=\"Footer\">\r\n            <Container>\r\n                <Row className=\"Border\">\r\n                    <Col>\r\n                        <i>All content is copyright © {new Date().getFullYear()} RusticSanta.com</i>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { ReactNode, FunctionComponent } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport Header from './Header/Header';\r\nimport NavigationBar from './NavigationBar/NavigationBar';\r\nimport Footer from './UI/Footer';\r\nimport './HomepageLayout.css';\r\n\r\ninterface ILayoutProps {\r\n    children: ReactNode;\r\n}\r\n\r\nconst HomepageLayout: FunctionComponent<ILayoutProps> = (props: ILayoutProps) => (\r\n    <>\r\n        <NavigationBar />\r\n        <div className=\"wrapper\">\r\n            <Header />\r\n            <Container className=\"MainContainer\">\r\n                <Row>\r\n                    <Col>{props.children}</Col>\r\n                </Row>\r\n            </Container>\r\n            <Footer />\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default HomepageLayout;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport ScreensHome from './Home/Home';\r\n// import ScreensProjects from './Projects/Projects';\r\nimport ScreensAbout from './About/About';\r\nimport ScreensContact from './Contact/Contact';\r\n\r\nimport GA from 'src/components/GoogleAnalytics';\r\nimport HomepageLayout from 'src/components/HomepageLayout';\r\n\r\nconst ScreensRoot: () => JSX.Element = () => (\r\n    <Router>\r\n        {/* Initialize Google Analytics and managing document title, description, and meta */}\r\n        {GA.init() && <GA.RouteTracker />}\r\n        <HomepageLayout>\r\n            {/* Main Content Routing Pages */}\r\n            <Switch>\r\n                <Route path=\"/\" exact component={ScreensHome} />\r\n                {/* <Route path=\"/projects/\" component={ScreensProjects} /> */}\r\n                <Route path=\"/about/\" component={ScreensAbout} />\r\n                <Route path=\"/contact/\" component={ScreensContact} />\r\n            </Switch>\r\n        </HomepageLayout>\r\n    </Router>\r\n);\r\n\r\nexport default ScreensRoot;\r\n","import React from 'react';\r\nimport ScreensRoot from 'src/screens/Root';\r\nimport './App.css';\r\n\r\nfunction App(): JSX.Element {\r\n    return <ScreensRoot />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-snapshot';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}