{"version":3,"sources":["images/rustic-santa-background.jpg","logo.svg","screens/Home/Home.js","components/About/ImageCard.tsx","components/UI/Table.tsx","screens/About/About.js","screens/Contact/Contact.js","components/GoogleAnalytics.tsx","components/HomepageLayout.tsx","screens/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ScreensHome","props","state","Fragment","Helmet","name","content","Segment","inverted","textAlign","className","vertical","Container","text","Header","as","Grid","columns","Row","Column","Component","AboutImageCard","Card","centered","Image","src","profilePic","Content","Meta","Description","UITable","title","Table","unstackable","headers","map","header","index","HeaderCell","key","Body","rows","row","r","Cell","experienceHeaders","experienceRows","educationHeaders","educationRows","skillsHeaders","skillsRows","ScreensAbout","stackable","width","Divider","ScreensContact","href","GoogleAnalytics","this","logPageChange","location","pathname","search","prevLocation","isDifferentPathname","isDifferentSearch","page","window","ReactGA","set","origin","options","pageview","component","initialize","process","getWidth","Responsive","onlyTablet","minWidth","innerWidth","Nav","exact","activeClassName","Pages","Menu","Item","to","position","onClick","Icon","React","DesktopContainer","Visibility","style","padding","secondary","size","Link","logo","alt","children","MobileContainer","handleSidebarHide","setState","sidebarOpened","handleSidebarShow","Sidebar","Pushable","maxWidth","onlyMobile","animation","direction","onHide","visible","float","link","Pusher","dimmed","Button","ResponsiveContainer","HomepageLayout","divided","Date","getFullYear","ScreensRoot","GA","path","App","Boolean","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b0771e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rustic-santa-background.e6e7f56c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Grid, Container, Header, Segment } from 'semantic-ui-react';\r\nimport Helmet from 'react-helmet';\r\n\r\n// import ProjectGroup from '../../components/Project/Group';\r\nimport './Home.css';\r\n\r\n/* eslint-disable react/no-multi-comp */\r\n/* Heads up! ScreensHome uses inline styling, however it's not the best practice. Use CSS or styled components for\r\n * such things.\r\n * @TODO: Remove the inline styling everywhere\r\n */\r\nclass ScreensHome extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/* Defining the Page title, meta, description */}\r\n                <Helmet>\r\n                    <title>Rustic Santa - Home</title>\r\n                    <meta name=\"description\" content=\"Contains the featured projects of Rustic Santa.\" />\r\n                    <meta name=\"subject\" content=\"Technology Portfolio\" />\r\n                </Helmet>\r\n                <Segment inverted textAlign=\"center\" className=\"Home-segment\" vertical>\r\n                    <Container text>\r\n                        <Header as=\"h1\" content=\"Rustic Santa\" inverted className=\"Home-h1\" />\r\n                        <Header as=\"h2\" content=\"Description to be added.\" inverted className=\"Home-h2\" />\r\n                    </Container>\r\n                </Segment>\r\n                {/* Header Page */}\r\n                <Segment textAlign=\"center\" className=\"Home-segment\" vertical>\r\n                    <Container>\r\n                        <Grid columns={1}>\r\n                            <Grid.Row>\r\n                                <Grid.Column>\r\n                                    <Header as=\"h3\" className=\"Home-h3\">\r\n                                        Some Of My Latest Work\r\n                                    </Header>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column>Description to be added</Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Container>\r\n                </Segment>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScreensHome;\r\n","import React from 'react';\r\nimport { Image, Card } from 'semantic-ui-react';\r\nimport profilePic from 'src/images/rustic-santa-background.jpg';\r\n\r\nconst AboutImageCard: () => JSX.Element = () => (\r\n    <Card centered>\r\n        <Image src={profilePic} />\r\n        <Card.Content>\r\n            <Card.Header>Rustic Santa</Card.Header>\r\n            <Card.Meta>Rustic Santa Meta Tag</Card.Meta>\r\n            <Card.Description>Rustic Santas Description</Card.Description>\r\n        </Card.Content>\r\n    </Card>\r\n);\r\n\r\nexport default AboutImageCard;\r\n","import React from 'react';\r\nimport { Table, Header } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    title: string;\r\n    rows: Array<any>;\r\n    headers: Array<any>;\r\n}\r\n\r\nconst UITable: (props: IProps) => JSX.Element = (props: IProps) => (\r\n    <div>\r\n        <Header inverted as=\"h3\">\r\n            {props.title}\r\n        </Header>\r\n        <Table inverted unstackable>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    {props.headers.map((header, index) => {\r\n                        return <Table.HeaderCell key={index}>{header}</Table.HeaderCell>;\r\n                    })}\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n                {props.rows.map((row, index) => {\r\n                    return (\r\n                        <Table.Row key={index}>\r\n                            {row.map((r: any, index: number) => {\r\n                                return <Table.Cell key={index}>{r}</Table.Cell>;\r\n                            })}\r\n                        </Table.Row>\r\n                    );\r\n                })}\r\n            </Table.Body>\r\n        </Table>\r\n    </div>\r\n);\r\n\r\nexport default UITable;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Container, Header, Segment, Grid, Divider } from 'semantic-ui-react';\r\nimport AboutImageCard from '../../components/About/ImageCard';\r\nimport UITable from '../../components/UI/Table';\r\nimport './About.css';\r\n\r\nconst experienceHeaders = ['RusticSantaTitle', 'RusticSantaTitle'];\r\nconst experienceRows = [\r\n    ['RusticSantaDescription', 'RusticSantaDescription'],\r\n    ['RusticSantaDescription', 'RusticSantaDescription'],\r\n];\r\nconst educationHeaders = ['RusticSantaTitle', 'RusticSantaTitle'];\r\nconst educationRows = [['RusticSantaDescription', 'RusticSantaDescription']];\r\nconst skillsHeaders = [];\r\nconst skillsRows = [['RusticSantaDescription'], ['RusticSantaDescription']];\r\n\r\nconst ScreensAbout = () => (\r\n    <Segment inverted vertical className=\"About-segment\">\r\n        {/* Defining the Page title, meta, description */}\r\n        <Helmet>\r\n            <title>Rustic Santa - About</title>\r\n            <meta name=\"description\" content=\"About Page for Rustic Santa.\" />\r\n            <meta name=\"subject\" content=\"About\" />\r\n        </Helmet>\r\n        <Container>\r\n            <Grid inverted stackable>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Header inverted as=\"h1\">\r\n                            About\r\n                        </Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column width={6}>\r\n                        <AboutImageCard />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={8} className=\"About-intro\">\r\n                        <p>\r\n                            Rustic Santa Description. Rustic Santa Description. Rustic Santa Description. Rustic Santa\r\n                            Description. Rustic Santa Description. Rustic Santa Description. Rustic Santa Description.\r\n                            Rustic Santa Description. Rustic Santa Description.\r\n                        </p>\r\n                        <p>\r\n                            Rustic Santa Description. Rustic Santa Description. Rustic Santa Description. Rustic Santa\r\n                            Description. Rustic Santa Description. Rustic Santa Description. Rustic Santa Description.\r\n                            Rustic Santa Description. Rustic Santa Description.\r\n                        </p>\r\n                        <p>\r\n                            Rustic Santa Description. Rustic Santa Description. Rustic Santa Description. Rustic Santa\r\n                            Description. Rustic Santa Description. Rustic Santa Description. Rustic Santa Description.\r\n                            Rustic Santa Description. Rustic Santa Description.\r\n                        </p>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Divider />\r\n                <Grid.Row>\r\n                    <Grid.Column width={6}>\r\n                        <UITable headers={experienceHeaders} rows={experienceRows} title={'Experience'} />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        <UITable headers={educationHeaders} rows={educationRows} title={'Education'} />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={4}>\r\n                        <UITable headers={skillsHeaders} rows={skillsRows} title={'Technical Skills'} />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Container>\r\n    </Segment>\r\n);\r\n\r\nexport default ScreensAbout;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Segment, Container, Grid, Header } from 'semantic-ui-react';\r\nimport './Contact.css';\r\n\r\nconst ScreensContact = () => (\r\n    <Segment inverted vertical className=\"Contact-segment\">\r\n        {/* Defining the Page title, meta, description */}\r\n        <Helmet>\r\n            <title>Rustic Santa - Contact</title>\r\n            <meta name=\"description\" content=\"Contact Page for Rustic Santa.\" />\r\n            <meta name=\"subject\" content=\"Contact\" />\r\n        </Helmet>\r\n        <Container>\r\n            <Grid inverted stackable>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Header inverted as=\"h1\">\r\n                            Contact\r\n                        </Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16} className=\"Contact-contactinfo\">\r\n                        <blockquote>\r\n                            <p>\r\n                                Feel free to reach out with any questions or inquiries. Please do not send spam or try\r\n                                to advertise any services to me.\r\n                            </p>\r\n                        </blockquote>\r\n                        <Header inverted as=\"h3\">\r\n                            Email\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"mailto:rusticsanta@hotmail.com\">rusticsanta@hotmail.com</a>\r\n                        </p>\r\n                        {/* <Header inverted as=\"h3\">\r\n                            LinkedIn\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"https://www.linkedin.com/in/MattJonesCreation/\">\r\n                                linkedin.com/in/MattJonesCreation\r\n                            </a>\r\n                        </p> */}\r\n                        {/* <Header inverted as=\"h3\">\r\n                            Github\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"https://github.com/MattJonesCreation\">github.com/MattJonesCreation</a>\r\n                        </p> */}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Container>\r\n    </Segment>\r\n);\r\n\r\nexport default ScreensContact;\r\n","// utils/GoogleAnalytics.js\r\nimport React, { Component } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Route } from 'react-router-dom';\r\n\r\ninterface ILocation {\r\n    pathname: string;\r\n    search: string;\r\n}\r\n\r\ninterface IGAProps {\r\n    location: ILocation;\r\n    options: any;\r\n}\r\n\r\nclass GoogleAnalytics extends Component<IGAProps> {\r\n    componentDidMount(): void {\r\n        this.logPageChange(this.props.location.pathname, this.props.location.search);\r\n    }\r\n\r\n    componentDidUpdate({ location: prevLocation }: IGAProps): void {\r\n        const {\r\n            location: { pathname, search },\r\n        } = this.props;\r\n        const isDifferentPathname = pathname !== prevLocation.pathname;\r\n        const isDifferentSearch = search !== prevLocation.search;\r\n\r\n        if (isDifferentPathname || isDifferentSearch) {\r\n            this.logPageChange(pathname, search);\r\n        }\r\n    }\r\n\r\n    logPageChange(pathname: string, search = ''): void {\r\n        const page = pathname + search;\r\n        const { location } = window;\r\n        ReactGA.set({\r\n            page,\r\n            location: `${location.origin}${page}`,\r\n            ...this.props.options,\r\n        });\r\n        ReactGA.pageview(page);\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst RouteTracker: () => JSX.Element = () => <Route component={GoogleAnalytics} />;\r\n\r\nconst init: () => boolean = () => {\r\n    const isGAEnabled = process.env.NODE_ENV === 'production';\r\n\r\n    if (isGAEnabled) {\r\n        ReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS);\r\n    }\r\n\r\n    return isGAEnabled;\r\n};\r\n\r\nexport default {\r\n    GoogleAnalytics,\r\n    RouteTracker,\r\n    init,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    Header,\r\n    Icon,\r\n    Menu,\r\n    Responsive,\r\n    Segment,\r\n    Sidebar,\r\n    Visibility,\r\n} from 'semantic-ui-react';\r\nimport logo from 'src/logo.svg';\r\n\r\n// Heads up!\r\n// We using React Static to prerender our docs with server side rendering, this is a quite simple solution.\r\n// For more advanced usage please check Responsive docs under the \"Usage\" section.\r\nconst getWidth = () => {\r\n    const isSSR = typeof window === 'undefined';\r\n\r\n    return isSSR ? (Responsive.onlyTablet.minWidth as number) : window.innerWidth;\r\n};\r\n\r\nconst Nav = (props: any) => <NavLink exact {...props} activeClassName=\"active\" />;\r\n\r\ninterface IProps {\r\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement>, data: any) => void;\r\n}\r\n\r\nclass Pages extends React.Component<IProps> {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Menu.Item as={Nav} to=\"/\" name=\"home\" position=\"right\" onClick={this.props.onClick}>\r\n                    <Icon name=\"home\" />\r\n                    Home\r\n                </Menu.Item>\r\n                {/* <Menu.Item as={Nav} to=\"/projects\" name=\"projects\" onClick={this.props.onClick}>\r\n                    <Icon name=\"briefcase\" />\r\n                    Projects\r\n                </Menu.Item> */}\r\n                <Menu.Item as={Nav} to=\"/about\" name=\"about\" onClick={this.props.onClick}>\r\n                    <Icon name=\"info\" />\r\n                    About\r\n                </Menu.Item>\r\n                <Menu.Item as={Nav} to=\"/contact\" name=\"contact\" onClick={this.props.onClick}>\r\n                    <Icon name=\"address book\" />\r\n                    Contact\r\n                </Menu.Item>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IDesktopProps {\r\n    children: any;\r\n}\r\n\r\n/* Heads up!\r\n * Neither Semantic UI nor Semantic UI React offer a responsive navbar, however, it can be implemented easily.\r\n * It can be more complicated, but you can create really flexible markup.\r\n */\r\nclass DesktopContainer extends Component<IDesktopProps> {\r\n    render() {\r\n        return (\r\n            <Responsive minWidth={Responsive.onlyTablet.minWidth} getWidth={getWidth}>\r\n                <Visibility>\r\n                    <Segment inverted textAlign=\"center\" style={{ padding: '1em 0em' }} vertical>\r\n                        <Menu inverted={true} secondary={true} size=\"large\">\r\n                            <Container>\r\n                                <Menu.Item as={Link} to=\"/\" name=\"home\">\r\n                                    <img src={logo} alt=\"logo\" />\r\n                                </Menu.Item>\r\n                                <Pages />\r\n                            </Container>\r\n                        </Menu>\r\n                    </Segment>\r\n                </Visibility>\r\n                {this.props.children}\r\n            </Responsive>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IMobileProps {\r\n    children: Node;\r\n}\r\n\r\ninterface IMobileState {\r\n    sidebarOpened: boolean;\r\n}\r\n\r\nclass MobileContainer extends Component<IMobileProps, IMobileState> {\r\n    constructor(props: IMobileProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sidebarOpened: false,\r\n        };\r\n    }\r\n\r\n    handleSidebarHide = () => this.setState({ sidebarOpened: false });\r\n\r\n    handleSidebarShow = () => this.setState({ sidebarOpened: true });\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const { sidebarOpened } = this.state;\r\n\r\n        return (\r\n            <Responsive as={Sidebar.Pushable} getWidth={getWidth} maxWidth={Responsive.onlyMobile.maxWidth}>\r\n                <Sidebar\r\n                    as={Menu}\r\n                    animation=\"overlay\"\r\n                    direction=\"right\"\r\n                    inverted\r\n                    onHide={this.handleSidebarHide}\r\n                    vertical\r\n                    visible={sidebarOpened}\r\n                >\r\n                    <Header style={{ padding: '1em 0em .5em 1em' }} inverted={true} as=\"h3\">\r\n                        Menu\r\n                        <Icon style={{ float: 'right' }} name=\"close\" link onClick={this.handleSidebarHide} />\r\n                    </Header>\r\n                    <Pages onClick={this.handleSidebarHide} />\r\n                </Sidebar>\r\n\r\n                <Sidebar.Pusher dimmed={sidebarOpened}>\r\n                    <Segment inverted textAlign=\"center\" style={{ padding: '1em 0em' }} vertical>\r\n                        <Container>\r\n                            <Menu inverted={true} secondary={true} size=\"large\">\r\n                                <Menu.Item as={Link} to=\"/\" name=\"home\">\r\n                                    {/* <img src={logo} alt=\"logo\" /> */}\r\n                                </Menu.Item>\r\n                                <Menu.Item position=\"right\">\r\n                                    <Button inverted={true} onClick={this.handleSidebarShow}>\r\n                                        <Icon name=\"sidebar\" />\r\n                                        Menu\r\n                                    </Button>\r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        </Container>\r\n                    </Segment>\r\n                    {children}\r\n                </Sidebar.Pusher>\r\n            </Responsive>\r\n        );\r\n    }\r\n}\r\n\r\nconst ResponsiveContainer = ({ children }: any) => (\r\n    <div>\r\n        <DesktopContainer>{children}</DesktopContainer>\r\n        <MobileContainer>{children}</MobileContainer>\r\n    </div>\r\n);\r\n\r\nResponsiveContainer.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\nconst HomepageLayout = ({ children }: any) => (\r\n    <ResponsiveContainer>\r\n        {children}\r\n\r\n        {/* Footer */}\r\n        <Segment inverted vertical style={{ padding: '2em 0em 1em 0em' }}>\r\n            <Container>\r\n                <Grid divided inverted stackable>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={13}>\r\n                            <p>\r\n                                <a href=\"https://github.com/rusticsanta/rusticsanta.github.io/blob/source/LICENSE\">\r\n                                    All content is copyright © {new Date().getFullYear()} Rustic Santa, any trademarks\r\n                                    are property of their respective owners\r\n                                </a>\r\n                            </p>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        </Segment>\r\n    </ResponsiveContainer>\r\n);\r\n\r\nexport default HomepageLayout;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport ScreensHome from './Home/Home';\r\n// import ScreensProjects from './Projects/Projects';\r\nimport ScreensAbout from './About/About';\r\nimport ScreensContact from './Contact/Contact';\r\n\r\nimport GA from 'src/components/GoogleAnalytics';\r\nimport HomepageLayout from 'src/components/HomepageLayout';\r\n\r\nconst ScreensRoot = () => (\r\n    <Router>\r\n        {/* Initialize Google Analytics and managing document title, description, and meta */}\r\n        {GA.init() && <GA.RouteTracker />}\r\n        <HomepageLayout>\r\n            {/* Main Content Routing Pages */}\r\n            <Switch>\r\n                <Route path=\"/\" exact component={ScreensHome} />\r\n                {/* <Route path=\"/projects/\" component={ScreensProjects} /> */}\r\n                <Route path=\"/about/\" component={ScreensAbout} />\r\n                <Route path=\"/contact/\" component={ScreensContact} />\r\n            </Switch>\r\n        </HomepageLayout>\r\n    </Router>\r\n);\r\n\r\nexport default ScreensRoot;\r\n","import React from 'react';\r\nimport ScreensRoot from 'src/screens/Root';\r\nimport './App.css';\r\n\r\nfunction App(): JSX.Element {\r\n    return <ScreensRoot />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport { render } from 'react-snapshot';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}