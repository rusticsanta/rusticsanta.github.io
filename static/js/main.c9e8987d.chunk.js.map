{"version":3,"sources":["screens/Home/Home.tsx","screens/About/About.tsx","screens/Contact/Contact.js","components/GoogleAnalytics.tsx","components/UI/NavigationBar.tsx","components/UI/Footer.tsx","components/HomepageLayout.tsx","screens/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["images","original","thumbnail","originalAlt","thumbnailAlt","ScreensHome","Helmet","name","content","className","Container","Row","Col","items","showBullets","ScreensAbout","ScreensContact","GoogleAnalytics","this","logPageChange","props","location","pathname","search","prevLocation","isDifferentPathname","isDifferentSearch","page","window","ReactGA","set","origin","options","pageview","Component","component","initialize","process","NavigationBar","toggle","setState","isOpen","state","activeItem","Navbar","color","light","expand","NavbarBrand","href","cloudName","publicId","secure","quality","fetchFormat","alt","radius","width","crop","angle","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","tag","ReactRouterNavLink","to","exact","activeClassName","React","Footer","size","Date","getFullYear","HomepageLayout","children","ScreensRoot","GA","path","App","Boolean","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9e8987d.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport ImageGallery from 'react-image-gallery';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\n// import ProjectGroup from '../../components/Project/Group';\r\nimport './Home.css';\r\n\r\nconst images = [\r\n    {\r\n        original:\r\n            'https://res.cloudinary.com/rusticsanta/image/upload/v1626026884/IMG_2537_j7gvu1.jpg',\r\n        thumbnail:\r\n            'https://res.cloudinary.com/rusticsanta/image/upload/t_media_lib_thumb/v1626026884/IMG_2537_j7gvu1.jpg',\r\n        originalAlt: 'Beautiful tile work done by Wilmac Flooring.',\r\n        thumbnailAlt: 'Beautiful tile work done by Wilmac Flooring.',\r\n    },\r\n    {\r\n        original: 'https://res.cloudinary.com/rusticsanta/image/upload/v1626026835/IMG_0077_elmomg.jpg',\r\n        thumbnail:\r\n            'https://res.cloudinary.com/rusticsanta/image/upload/t_media_lib_thumb/v1626026835/IMG_0077_elmomg.jpg',\r\n        originalAlt: 'Incredible Entryway with custom centered tile.',\r\n        thumbnailAlt: 'Incredible Entryway with custom centered tile.',\r\n    },\r\n    {\r\n        original:\r\n            'https://res.cloudinary.com/rusticsanta/image/upload/v1626026835/IMG_0078_zhbwky.jpg',\r\n        thumbnail:\r\n            'https://res.cloudinary.com/rusticsanta/image/upload/t_media_lib_thumb/v1626026835/IMG_0078_zhbwky.jpg',\r\n        originalAlt: 'Beautiful wood floors and tile combined together. Work by Wilmac Flooring.',\r\n        thumbnailAlt: 'Beautiful wood floors and tile combined together. Work by Wilmac Flooring.',\r\n    },\r\n    {\r\n        original:\r\n            'https://res.cloudinary.com/rusticsanta/image/upload/v1626026835/IMG_0073_f3wyeq.jpg',\r\n        thumbnail:\r\n            'https://res.cloudinary.com/rusticsanta/image/upload/t_media_lib_thumb/v1626026835/IMG_0073_f3wyeq.jpg',\r\n        originalAlt: 'Beautiful wood floors and tile combined together. Work by Wilmac Flooring.',\r\n        thumbnailAlt: 'Beautiful wood floors and tile combined together. Work by Wilmac Flooring.',\r\n    }\r\n];\r\n\r\n/* eslint-disable react/no-multi-comp */\r\n/* Heads up! ScreensHome uses inline styling, however it's not the best practice. Use CSS or styled components for\r\n * such things.\r\n * @TODO: Remove the inline styling everywhere\r\n */\r\nconst ScreensHome: FunctionComponent = () => (\r\n    <div>\r\n        {/* Defining the Page title, meta, description */}\r\n        <Helmet>\r\n            <title>Rustic Santa - Home</title>\r\n            <meta name=\"description\" content=\"Contains the featured projects of Rustic Santa.\" />\r\n            {/* TODO: Add subject content for SEO. */}\r\n            <meta name=\"subject\" content=\"Technology Portfolio\" />\r\n        </Helmet>\r\n        <h1>Latest Work</h1>\r\n        <div className=\"Home\">\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <ImageGallery items={images} showBullets={true} />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n        {/* <div>\r\n            <h2>\r\n                <a>Visit our Photo Gallery</a>\r\n            </h2>\r\n        </div> */}\r\n    </div>\r\n);\r\n\r\nexport default ScreensHome;\r\n","import React, { FunctionComponent } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n// import { Image, Transformation } from 'cloudinary-react';\r\nimport './About.css';\r\n\r\nconst ScreensAbout: FunctionComponent = () => {\r\n    return (\r\n        <div className=\"About\">\r\n            <Helmet>\r\n                <title>Rustic Santa - About Us</title>\r\n                <meta name=\"description\" content=\"About Page for Rustic Santa.\" />\r\n                <meta name=\"subject\" content=\"About\" />\r\n            </Helmet>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <h1>About Us</h1>\r\n                        <br />\r\n                        <h3>What sets Rustic Santa apart</h3>\r\n                        <p>\r\n                            TBD.\r\n                        </p>\r\n                        <h4>Our Services</h4>\r\n                        <p>\r\n                            TBD.\r\n                        </p>\r\n                        <h4>Our Goal</h4>\r\n                        <p>\r\n                            TBD.\r\n                        </p>\r\n                        <h4>Our Values</h4>\r\n                        <p>\r\n                            TBD.\r\n                        </p>\r\n                        <br />\r\n                        <h3>Meet Rustic Santa</h3>\r\n                        <br />\r\n                        <p>\r\n                            <i>TBD. </i>\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScreensAbout;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport './Contact.css';\r\n\r\nconst ScreensContact = () => (\r\n    <div>\r\n        {/* Defining the Page title, meta, description */}\r\n        <Helmet>\r\n            <title>Rustic Santa - Contact</title>\r\n            <meta name=\"description\" content=\"Contact Page for Rustic Santa.\" />\r\n            {/* TODO: Add subject to your SEO */}\r\n            <meta name=\"subject\" content=\"Contact\" />\r\n        </Helmet>\r\n        <div>Contact page</div>\r\n        {/* <Container>\r\n            <Grid inverted stackable>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Header inverted as=\"h1\">\r\n                            Contact\r\n                        </Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16} className=\"Contact-contactinfo\">\r\n                        <blockquote>\r\n                            <p>\r\n                                Feel free to reach out with any questions or inquiries. Please do not send spam or try\r\n                                to advertise any services to me.\r\n                            </p>\r\n                        </blockquote>\r\n                        <Header inverted as=\"h3\">\r\n                            Email\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"mailto:rusticsanta@hotmail.com\">rusticsanta@hotmail.com</a>\r\n                        </p>\r\n                        <Header inverted as=\"h3\">\r\n                            LinkedIn\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"https://www.linkedin.com/in/MattJonesCreation/\">\r\n                                linkedin.com/in/MattJonesCreation\r\n                            </a>\r\n                        </p>\r\n                        <Header inverted as=\"h3\">\r\n                            Github\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"https://github.com/MattJonesCreation\">github.com/MattJonesCreation</a>\r\n                        </p> \r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Container> */}\r\n    </div>\r\n);\r\n\r\nexport default ScreensContact;","// utils/GoogleAnalytics.js\r\nimport React, { Component } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Route } from 'react-router-dom';\r\n\r\ninterface ILocation {\r\n    pathname: string;\r\n    search: string;\r\n}\r\n\r\ninterface IGAProps {\r\n    location: ILocation;\r\n    options: Record<string, unknown>;\r\n}\r\n\r\nclass GoogleAnalytics extends Component<IGAProps> {\r\n    componentDidMount(): void {\r\n        this.logPageChange(this.props.location.pathname, this.props.location.search);\r\n    }\r\n\r\n    componentDidUpdate({ location: prevLocation }: IGAProps): void {\r\n        const {\r\n            location: { pathname, search },\r\n        } = this.props;\r\n        const isDifferentPathname = pathname !== prevLocation.pathname;\r\n        const isDifferentSearch = search !== prevLocation.search;\r\n\r\n        if (isDifferentPathname || isDifferentSearch) {\r\n            this.logPageChange(pathname, search);\r\n        }\r\n    }\r\n\r\n    logPageChange(pathname: string, search = ''): void {\r\n        const page = pathname + search;\r\n        const { location } = window;\r\n        ReactGA.set({\r\n            page,\r\n            location: `${location.origin}${page}`,\r\n            ...this.props.options,\r\n        });\r\n        ReactGA.pageview(page);\r\n    }\r\n\r\n    render(): null {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst RouteTracker: () => JSX.Element = () => <Route component={GoogleAnalytics} />;\r\n\r\nconst init: () => boolean = () => {\r\n    const isGAEnabled = process.env.NODE_ENV === 'production';\r\n\r\n    if (isGAEnabled) {\r\n        ReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS);\r\n    }\r\n\r\n    return isGAEnabled;\r\n};\r\n\r\nexport default {\r\n    GoogleAnalytics,\r\n    RouteTracker,\r\n    init,\r\n};\r\n","import React from 'react';\r\nimport { NavLink as ReactRouterNavLink } from 'react-router-dom';\r\nimport { Container, Row, Col, Collapse, Navbar, NavbarToggler, Nav, NavItem, NavLink, NavbarBrand } from 'reactstrap';\r\nimport { Image, Transformation } from 'cloudinary-react';\r\nimport './NavigationBar.css';\r\n\r\ninterface IState {\r\n    activeItem: number;\r\n    isOpen: boolean;\r\n}\r\n\r\nclass NavigationBar extends React.Component<unknown, IState> {\r\n    constructor(props: unknown) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            activeItem: 0,\r\n        };\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <Navbar color=\"fixed\" light expand=\"md\">\r\n                                <NavbarBrand href=\"/\">\r\n                                    <div>\r\n                                    <Image\r\n                                            cloudName=\"rusticsanta\"\r\n                                            publicId=\"IMG_0072_sfu1ip\"\r\n                                            secure={true}\r\n                                            quality=\"auto\"\r\n                                            fetchFormat=\"auto\"\r\n                                            alt=\"Rustic Santa Logo\"\r\n                                        >\r\n                                        <Transformation quality=\"auto\" radius=\"30\" width=\"110\" crop=\"thumb\" />\r\n                                        <Transformation angle=\"0\" />\r\n                                        </Image>{' '}\r\n                                    </div>\r\n                                </NavbarBrand>\r\n                                <NavbarToggler onClick={this.toggle} />\r\n                                <Collapse isOpen={this.state.isOpen} navbar>\r\n                                    <Nav className=\"mr-auto\" navbar>\r\n                                        <NavItem>\r\n                                            <NavLink\r\n                                                tag={ReactRouterNavLink}\r\n                                                to=\"/\"\r\n                                                exact={true}\r\n                                                name=\"home\"\r\n                                                activeClassName=\"active\"\r\n                                            >\r\n                                                Home\r\n                                            </NavLink>\r\n                                        </NavItem>\r\n                                        <NavItem>\r\n                                            <NavLink\r\n                                                tag={ReactRouterNavLink}\r\n                                                to=\"/about\"\r\n                                                name=\"about\"\r\n                                                activeClassName=\"active\"\r\n                                            >\r\n                                                About Us\r\n                                            </NavLink>\r\n                                        </NavItem>\r\n                                        <NavItem>\r\n                                            <NavLink\r\n                                                tag={ReactRouterNavLink}\r\n                                                to=\"/products\"\r\n                                                name=\"products\"\r\n                                                activeClassName=\"active\"\r\n                                            >\r\n                                                Our Products\r\n                                            </NavLink>\r\n                                        </NavItem>\r\n                                        <NavItem>\r\n                                            <NavLink\r\n                                                tag={ReactRouterNavLink}\r\n                                                to=\"/gallery\"\r\n                                                name=\"gallery\"\r\n                                                activeClassName=\"active\"\r\n                                            >\r\n                                                Photo Gallery\r\n                                            </NavLink>\r\n                                        </NavItem>\r\n                                    </Nav>\r\n                                </Collapse>\r\n                            </Navbar>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { FaFacebook, FaCaretRight } from 'react-icons/fa';\r\nimport './Footer.css';\r\n\r\nconst Footer: FunctionComponent = () => {\r\n    return (\r\n        <div className=\"Footer\">\r\n            <Container>\r\n                <Row className=\"GoodSpacing\">\r\n                    <Col>\r\n                        <h5>FOLLOW Rustic Santa</h5>\r\n                        <div className=\"FooterIcons\">\r\n                            <FaCaretRight size={36} />\r\n                            <a href=\"https://www.facebook.com/rustic.santa.9\">                            \r\n                                <FaFacebook size={36} />\r\n                            </a>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"Border\">\r\n                    <Col>\r\n                        <i>All content is copyright © {new Date().getFullYear()} RusticSanta.com</i>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { ReactNode, FunctionComponent } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n// import Header from './UI/Header';\r\nimport NavigationBar from './UI/NavigationBar';\r\nimport Footer from './UI/Footer';\r\nimport './HomepageLayout.css';\r\n\r\ninterface ILayoutProps {\r\n    children: ReactNode;\r\n}\r\n\r\nconst HomepageLayout: FunctionComponent<ILayoutProps> = (props: ILayoutProps) => (\r\n    <div>\r\n        {/* <Header /> */}\r\n        <NavigationBar />\r\n        <Container className=\"MainContainer\">\r\n            <Row>\r\n                <Col>{props.children}</Col>\r\n            </Row>\r\n        </Container>\r\n        <Footer />\r\n    </div>\r\n);\r\n\r\nexport default HomepageLayout;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport ScreensHome from './Home/Home';\r\n// import ScreensProjects from './Projects/Projects';\r\nimport ScreensAbout from './About/About';\r\nimport ScreensContact from './Contact/Contact';\r\n\r\nimport GA from 'src/components/GoogleAnalytics';\r\nimport HomepageLayout from 'src/components/HomepageLayout';\r\n\r\nconst ScreensRoot: () => JSX.Element = () => (\r\n    <Router>\r\n        {/* Initialize Google Analytics and managing document title, description, and meta */}\r\n        {GA.init() && <GA.RouteTracker />}\r\n        <HomepageLayout>\r\n            {/* Main Content Routing Pages */}\r\n            <Switch>\r\n                <Route path=\"/\" exact component={ScreensHome} />\r\n                {/* <Route path=\"/projects/\" component={ScreensProjects} /> */}\r\n                <Route path=\"/about/\" component={ScreensAbout} />\r\n                <Route path=\"/contact/\" component={ScreensContact} />\r\n            </Switch>\r\n        </HomepageLayout>\r\n    </Router>\r\n);\r\n\r\nexport default ScreensRoot;\r\n","import React from 'react';\r\nimport ScreensRoot from 'src/screens/Root';\r\nimport './App.css';\r\n\r\nfunction App(): JSX.Element {\r\n    return <ScreensRoot />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-snapshot';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}